name: Build and Publish

on:
  push:
    branches:
      - master
      - java8-multiarch
      - java8-openj9
      - java11*
      - java16*
      - java17*
      - test/**
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+-java8-multiarch"
      - "[0-9]+.[0-9]+.[0-9]+-java8-openj9"
      - "[0-9]+.[0-9]+.[0-9]+-java11*"
      - "[0-9]+.[0-9]+.[0-9]+-java16*"
    paths-ignore:
      - "*.md"
      - "docs/**"
      - "examples/**"

env:
  IMAGE_TO_TEST: itzg/minecraft-server:test-${{ github.repository_owner }}-${{ github.run_id }}
  DOCKER_IMAGE: itzg/minecraft-server
  PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
  REGION: us-central1

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2.4.0

    - name: Prepare
      id: prep
      run: |
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        if [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=${GITHUB_REF#refs/heads/}
          if [[ $VERSION == master ]]; then
            VERSION=latest
          fi
        fi
        TAGS="${{env.DOCKER_IMAGE}}:${VERSION//\//-}"
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=version::${VERSION//\//-}

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build for test
      uses: docker/build-push-action@v2.8.0
      if: github.ref_name == 'java8'
      with:
        context: .
        platforms: linux/amd64
        tags: ${{ env.IMAGE_TO_TEST }}
        # ensure latest base image is used
        pull: true
        load: true
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run tests
      if: github.ref_name == 'java8'
      run: |
        tests/test.sh
      env:
        MINECRAFT_VERSION: 1.12.2

    # - name: Build and push
    #   id: docker_build
    #   uses: docker/build-push-action@v2.8.0
    #   with:
    #     context: .
    #     file: ./Dockerfile
    #     # ensure latest base image is used
    #     pull: true
    #     # publish
    #     push: true
    #     # tags determined by prep step
    #     tags: ${{ steps.prep.outputs.tags }}
    #     cache-from: type=gha
    #     cache-to: type=gha,mode=max
    #     labels: |
    #       org.opencontainers.image.documentation=https://github.com/itzg/docker-minecraft-server
    #       org.opencontainers.image.version=${{ steps.prep.outputs.version }}
    #       org.opencontainers.image.source=https://github.com/itzg/docker-minecraft-server
    #       org.opencontainers.image.revision=${{ github.sha }}
    
    ## BUILD AND PUSH TO GCP
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
      with:
        project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true  # Set to true to authenticate the Cloud Run action

    - name: Authorize Docker push
      run: gcloud auth configure-docker

    - name: Build and Push Container
      run: |-
        docker build -t gcr.io/${{ secrets.GCLOUD_PROJECT_ID }}/${{ secrets.GCLOUD_PROJECT_NAME }}:${{  github.sha }} ${{env.DOCKER_IMAGE}}
        docker push gcr.io/${{ secrets.GCLOUD_PROJECT_ID }}/${{ secrets.GCLOUD_PROJECT_NAME }}:${{  github.sha }}
    # - name: Deploy to Cloud Run
    #   id: deploy
    #   uses: google-github-actions/deploy-cloudrun@v0
    #   with:
    #     service: ${{ secrets.GCLOUD_PROJECT_NAME }}
    #     image: gcr.io/${{ secrets.GCLOUD_PROJECT_ID  }}/${{ secrets.GCLOUD_PROJECT_NAME }}:${{  github.sha }}
    #     region: ${{ env.REGION }}

    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}